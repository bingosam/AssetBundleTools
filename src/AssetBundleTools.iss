; Script generated by the Inno Setup Script Wizard.
; SEE THE DOCUMENTATION FOR DETAILS ON CREATING INNO SETUP SCRIPT FILES!

#define MyAppName "Asset Bundle Tool"
#define MyAppPublisher ""
#define MyAppURL ""
#define MyAppExeName "AssetBundleTools.exe"
#define MySourcePath "../bin/x64/Release"
#define MyResourcesPath "../resources"
#define InstallerMutex "nd_abt_installer_mutex"
#define MyCompanyName "福建天晴数码有限公司"
#define appmutex "nd_abt_pc_mutex"
#define MyDateTimeString GetDateTimeString('yyyy.mm.dd.hh', '', '');
#define MyFileVersion  GetFileVersion('../bin/x64/Release/AssetBundleTools.exe')
#define MyProductVersion  GetStringFileInfo('../bin/x64/Release/AssetBundleTools.exe', 'ProductVersion')

[Setup]
; NOTE: The value of AppId uniquely identifies this application.
; Do not use the same AppId value in installers for other applications.
; (To generate a new GUID, click Tools | Generate GUID inside the IDE.)
AppId={{9D95E81E-E180-4CAF-9DC0-9DCDCDB81B4D}}
AppName={#MyAppName}
AppVersion={#MyProductVersion}
VersionInfoVersion={#MyFileVersion}
;AppVerName={#MyAppName} {#MyAppVersion}
AppPublisher={#MyAppPublisher}
AppPublisherURL={#MyAppURL}
AppSupportURL={#MyAppURL}
AppUpdatesURL={#MyAppURL}
DefaultDirName={pf}\{#MyAppName}
DefaultGroupName={#MyAppName}
AllowNoIcons=yes
OutputDir=..\installer\{#MyDateTimeString}
OutputBaseFilename=ABTSetup
Compression=lzma
SolidCompression=yes
ArchitecturesInstallIn64BitMode=x64 ia64
;;修改环境变量
ChangesEnvironment=true

[Languages]
Name: "chinese"; MessagesFile: "compiler:Languages\Chinese.isl"

[Tasks]
Name: "desktopicon"; Description: "{cm:CreateDesktopIcon}"; GroupDescription: "{cm:AdditionalIcons}"; Flags: unchecked

[CustomMessages]
AppIsrunningWarning="{#MyAppName}正在运行,请先关闭程序再继续!"

[Files]
Source: "{#MySourcePath}\{#MyAppExeName}"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MySourcePath}\AssetsTools.dll"; DestDir: "{app}"; Flags: ignoreversion
Source: "{#MyResourcesPath}\*"; DestDir: "{app}"; Flags: ignoreversion createallsubdirs recursesubdirs
; NOTE: Don't use "Flags: ignoreversion" on any shared system files

[Dirs]
Name: "{app}\logs"

[Run]
;;Filename: "{tmp}\vcredist_x64.exe"; Parameters: /q; WorkingDir: {tmp}; Flags: skipifdoesntexist; StatusMsg: "Installing Microsoft Visual C++ Runtime ..."; Check: NeedInstallVC9SP1

[Icons]
Name: "{group}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"
Name: "{group}\{cm:UninstallProgram,{#MyAppName}}"; Filename: "{uninstallexe}"
Name: "{commondesktop}\{#MyAppName}"; Filename: "{app}\{#MyAppExeName}"; Tasks: desktopicon
 
[UninstallDelete]
Type: filesandordirs; Name: "{app}\logs"
                           
[code]               
function IsX64: Boolean;
begin
  Result := Is64BitInstallMode and (ProcessorArchitecture = paX64);
end;

function IsIA64: Boolean;
begin
  Result := Is64BitInstallMode and (ProcessorArchitecture = paIA64);
end;

function IsOtherArch: Boolean;
begin
  Result := not IsX64 and not IsIA64;
end;

function SetupIsRunning(): Boolean;
begin
  Result := false;
  if CheckForMutexes( '{#InstallerMutex}' ) then
  begin
    if not WizardSilent() then
      MsgBox( '安装程序已启动!', mbError, MB_OK);                           
    Result := true;
  end
  else begin
    CreateMutex('{#InstallerMutex}');
  end;
end;

function AppIsRunning(): Boolean;
begin
  Result := false;
  if CheckForMutexes('{#appmutex}')  then
  begin
    if IsUninstaller() then
    begin
      if not UninstallSilent() then
        MsgBox( ExpandConstant('{cm:AppIsrunningWarning}'), mbError, MB_OK);        
    end
    else if not WizardSilent() then
      MsgBox( ExpandConstant('{cm:AppIsrunningWarning}'), mbError, MB_OK);                           
    Result := true;
  end;
end;

function InitializeSetup(): Boolean;
var version: Cardinal;  
begin
  Result := not SetupIsRunning();

  if Result then
    Result := not AppIsRunning;
end;

procedure SetEnv(aEnvName, aEnvValue : string; aIsInstall, aIsInsForAllUser : Boolean);
var
sOrgValue : string;
S1, sFileName, sInsFlag: string;
bRetValue, bInsForAllUser: Boolean;                                                                              
SL: TStringList;
x: Integer;
begin
  bInsForAllUser := aIsInsForAllUser;
  if UsingWinNT then
  begin
    
  end;
end;